// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: econ.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "econ.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* Inventory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Inventory_reflection_ = NULL;
const ::google::protobuf::Descriptor* Strategy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Strategy_reflection_ = NULL;
const ::google::protobuf::Descriptor* EconAgent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EconAgent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ingredient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ingredient_reflection_ = NULL;
const ::google::protobuf::Descriptor* Recipe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Recipe_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_econ_2eproto() {
  protobuf_AddDesc_econ_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "econ.proto");
  GOOGLE_CHECK(file != NULL);
  Item_descriptor_ = file->message_type(0);
  static const int Item_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, defense_),
  };
  Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_descriptor_,
      Item::default_instance_,
      Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item));
  Inventory_descriptor_ = file->message_type(1);
  static const int Inventory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory, items_),
  };
  Inventory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Inventory_descriptor_,
      Inventory::default_instance_,
      Inventory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Inventory));
  Strategy_descriptor_ = file->message_type(2);
  static const int Strategy_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, param3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, param4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, param5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, param6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, param7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, param8_),
  };
  Strategy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Strategy_descriptor_,
      Strategy::default_instance_,
      Strategy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Strategy));
  EconAgent_descriptor_ = file->message_type(3);
  static const int EconAgent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EconAgent, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EconAgent, inventory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EconAgent, strategy_),
  };
  EconAgent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EconAgent_descriptor_,
      EconAgent::default_instance_,
      EconAgent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EconAgent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EconAgent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EconAgent));
  Ingredient_descriptor_ = file->message_type(4);
  static const int Ingredient_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ingredient, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ingredient, count_),
  };
  Ingredient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ingredient_descriptor_,
      Ingredient::default_instance_,
      Ingredient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ingredient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ingredient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ingredient));
  Recipe_descriptor_ = file->message_type(5);
  static const int Recipe_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recipe, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recipe, output_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recipe, ingredients_),
  };
  Recipe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Recipe_descriptor_,
      Recipe::default_instance_,
      Recipe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recipe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recipe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Recipe));
  World_descriptor_ = file->message_type(6);
  static const int World_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World, armors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World, crafting_materials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World, recipes_),
  };
  World_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_descriptor_,
      World::default_instance_,
      World_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_econ_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_descriptor_, &Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Inventory_descriptor_, &Inventory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Strategy_descriptor_, &Strategy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EconAgent_descriptor_, &EconAgent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ingredient_descriptor_, &Ingredient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Recipe_descriptor_, &Recipe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_descriptor_, &World::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_econ_2eproto() {
  delete Item::default_instance_;
  delete Item_reflection_;
  delete Inventory::default_instance_;
  delete Inventory_reflection_;
  delete Strategy::default_instance_;
  delete Strategy_reflection_;
  delete EconAgent::default_instance_;
  delete EconAgent_reflection_;
  delete Ingredient::default_instance_;
  delete Ingredient_reflection_;
  delete Recipe::default_instance_;
  delete Recipe_reflection_;
  delete World::default_instance_;
  delete World_reflection_;
}

void protobuf_AddDesc_econ_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\necon.proto\022\005proto\"1\n\004Item\022\n\n\002id\030\001 \002(\005\022"
    "\014\n\004name\030\002 \002(\t\022\017\n\007defense\030\003 \001(\005\"5\n\tInvent"
    "ory\022\014\n\004coin\030\001 \002(\005\022\032\n\005items\030\002 \003(\0132\013.proto"
    ".Item\"\212\001\n\010Strategy\022\016\n\006param1\030\001 \002(\001\022\016\n\006pa"
    "ram2\030\002 \002(\001\022\016\n\006param3\030\003 \002(\001\022\016\n\006param4\030\004 \002"
    "(\001\022\016\n\006param5\030\005 \002(\001\022\016\n\006param6\030\006 \002(\001\022\016\n\006pa"
    "ram7\030\007 \002(\001\022\016\n\006param8\030\010 \002(\001\"`\n\tEconAgent\022"
    "\013\n\003aid\030\001 \002(\005\022#\n\tinventory\030\002 \002(\0132\020.proto."
    "Inventory\022!\n\010strategy\030\003 \002(\0132\017.proto.Stra"
    "tegy\",\n\nIngredient\022\017\n\007item_id\030\001 \002(\005\022\r\n\005c"
    "ount\030\002 \002(\005\"T\n\006Recipe\022\n\n\002id\030\001 \002(\005\022\026\n\016outp"
    "ut_item_id\030\002 \002(\005\022&\n\013ingredients\030\003 \003(\0132\021."
    "proto.Ingredient\"m\n\005World\022\033\n\006armors\030\001 \003("
    "\0132\013.proto.Item\022\'\n\022crafting_materials\030\002 \003"
    "(\0132\013.proto.Item\022\036\n\007recipes\030\003 \003(\0132\r.proto"
    ".Recipe", 607);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "econ.proto", &protobuf_RegisterTypes);
  Item::default_instance_ = new Item();
  Inventory::default_instance_ = new Inventory();
  Strategy::default_instance_ = new Strategy();
  EconAgent::default_instance_ = new EconAgent();
  Ingredient::default_instance_ = new Ingredient();
  Recipe::default_instance_ = new Recipe();
  World::default_instance_ = new World();
  Item::default_instance_->InitAsDefaultInstance();
  Inventory::default_instance_->InitAsDefaultInstance();
  Strategy::default_instance_->InitAsDefaultInstance();
  EconAgent::default_instance_->InitAsDefaultInstance();
  Ingredient::default_instance_->InitAsDefaultInstance();
  Recipe::default_instance_->InitAsDefaultInstance();
  World::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_econ_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_econ_2eproto {
  StaticDescriptorInitializer_econ_2eproto() {
    protobuf_AddDesc_econ_2eproto();
  }
} static_descriptor_initializer_econ_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Item::kIdFieldNumber;
const int Item::kNameFieldNumber;
const int Item::kDefenseFieldNumber;
#endif  // !_MSC_VER

Item::Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item::InitAsDefaultInstance() {
}

Item::Item(const Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defense_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item::~Item() {
  SharedDtor();
}

void Item::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_descriptor_;
}

const Item& Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_2eproto();
  return *default_instance_;
}

Item* Item::default_instance_ = NULL;

Item* Item::New() const {
  return new Item;
}

void Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    defense_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_defense;
        break;
      }

      // optional int32 defense = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defense_)));
          set_has_defense();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 defense = 3;
  if (has_defense()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->defense(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 defense = 3;
  if (has_defense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->defense(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 defense = 3;
    if (has_defense()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defense());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_defense()) {
      set_defense(from.defense());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Item::Swap(Item* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(defense_, other->defense_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_descriptor_;
  metadata.reflection = Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Inventory::kCoinFieldNumber;
const int Inventory::kItemsFieldNumber;
#endif  // !_MSC_VER

Inventory::Inventory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Inventory::InitAsDefaultInstance() {
}

Inventory::Inventory(const Inventory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Inventory::SharedCtor() {
  _cached_size_ = 0;
  coin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Inventory::~Inventory() {
  SharedDtor();
}

void Inventory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Inventory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Inventory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Inventory_descriptor_;
}

const Inventory& Inventory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_2eproto();
  return *default_instance_;
}

Inventory* Inventory::default_instance_ = NULL;

Inventory* Inventory::New() const {
  return new Inventory;
}

void Inventory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    coin_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Inventory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 coin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .proto.Item items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Inventory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 coin = 1;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->coin(), output);
  }

  // repeated .proto.Item items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Inventory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 coin = 1;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->coin(), target);
  }

  // repeated .proto.Item items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Inventory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 coin = 1;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }

  }
  // repeated .proto.Item items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Inventory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Inventory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Inventory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Inventory::MergeFrom(const Inventory& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Inventory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Inventory::CopyFrom(const Inventory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inventory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void Inventory::Swap(Inventory* other) {
  if (other != this) {
    std::swap(coin_, other->coin_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Inventory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Inventory_descriptor_;
  metadata.reflection = Inventory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Strategy::kParam1FieldNumber;
const int Strategy::kParam2FieldNumber;
const int Strategy::kParam3FieldNumber;
const int Strategy::kParam4FieldNumber;
const int Strategy::kParam5FieldNumber;
const int Strategy::kParam6FieldNumber;
const int Strategy::kParam7FieldNumber;
const int Strategy::kParam8FieldNumber;
#endif  // !_MSC_VER

Strategy::Strategy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Strategy::InitAsDefaultInstance() {
}

Strategy::Strategy(const Strategy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Strategy::SharedCtor() {
  _cached_size_ = 0;
  param1_ = 0;
  param2_ = 0;
  param3_ = 0;
  param4_ = 0;
  param5_ = 0;
  param6_ = 0;
  param7_ = 0;
  param8_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Strategy::~Strategy() {
  SharedDtor();
}

void Strategy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Strategy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Strategy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Strategy_descriptor_;
}

const Strategy& Strategy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_2eproto();
  return *default_instance_;
}

Strategy* Strategy::default_instance_ = NULL;

Strategy* Strategy::New() const {
  return new Strategy;
}

void Strategy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    param1_ = 0;
    param2_ = 0;
    param3_ = 0;
    param4_ = 0;
    param5_ = 0;
    param6_ = 0;
    param7_ = 0;
    param8_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Strategy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double param1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_param2;
        break;
      }

      // required double param2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_param3;
        break;
      }

      // required double param3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_param3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &param3_)));
          set_has_param3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_param4;
        break;
      }

      // required double param4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_param4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &param4_)));
          set_has_param4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_param5;
        break;
      }

      // required double param5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_param5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &param5_)));
          set_has_param5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_param6;
        break;
      }

      // required double param6 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_param6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &param6_)));
          set_has_param6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_param7;
        break;
      }

      // required double param7 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_param7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &param7_)));
          set_has_param7();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_param8;
        break;
      }

      // required double param8 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_param8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &param8_)));
          set_has_param8();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Strategy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double param1 = 1;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->param1(), output);
  }

  // required double param2 = 2;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->param2(), output);
  }

  // required double param3 = 3;
  if (has_param3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->param3(), output);
  }

  // required double param4 = 4;
  if (has_param4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->param4(), output);
  }

  // required double param5 = 5;
  if (has_param5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->param5(), output);
  }

  // required double param6 = 6;
  if (has_param6()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->param6(), output);
  }

  // required double param7 = 7;
  if (has_param7()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->param7(), output);
  }

  // required double param8 = 8;
  if (has_param8()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->param8(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Strategy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double param1 = 1;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->param1(), target);
  }

  // required double param2 = 2;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->param2(), target);
  }

  // required double param3 = 3;
  if (has_param3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->param3(), target);
  }

  // required double param4 = 4;
  if (has_param4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->param4(), target);
  }

  // required double param5 = 5;
  if (has_param5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->param5(), target);
  }

  // required double param6 = 6;
  if (has_param6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->param6(), target);
  }

  // required double param7 = 7;
  if (has_param7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->param7(), target);
  }

  // required double param8 = 8;
  if (has_param8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->param8(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Strategy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double param1 = 1;
    if (has_param1()) {
      total_size += 1 + 8;
    }

    // required double param2 = 2;
    if (has_param2()) {
      total_size += 1 + 8;
    }

    // required double param3 = 3;
    if (has_param3()) {
      total_size += 1 + 8;
    }

    // required double param4 = 4;
    if (has_param4()) {
      total_size += 1 + 8;
    }

    // required double param5 = 5;
    if (has_param5()) {
      total_size += 1 + 8;
    }

    // required double param6 = 6;
    if (has_param6()) {
      total_size += 1 + 8;
    }

    // required double param7 = 7;
    if (has_param7()) {
      total_size += 1 + 8;
    }

    // required double param8 = 8;
    if (has_param8()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Strategy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Strategy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Strategy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Strategy::MergeFrom(const Strategy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_param3()) {
      set_param3(from.param3());
    }
    if (from.has_param4()) {
      set_param4(from.param4());
    }
    if (from.has_param5()) {
      set_param5(from.param5());
    }
    if (from.has_param6()) {
      set_param6(from.param6());
    }
    if (from.has_param7()) {
      set_param7(from.param7());
    }
    if (from.has_param8()) {
      set_param8(from.param8());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Strategy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Strategy::CopyFrom(const Strategy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Strategy::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void Strategy::Swap(Strategy* other) {
  if (other != this) {
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(param3_, other->param3_);
    std::swap(param4_, other->param4_);
    std::swap(param5_, other->param5_);
    std::swap(param6_, other->param6_);
    std::swap(param7_, other->param7_);
    std::swap(param8_, other->param8_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Strategy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Strategy_descriptor_;
  metadata.reflection = Strategy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EconAgent::kAidFieldNumber;
const int EconAgent::kInventoryFieldNumber;
const int EconAgent::kStrategyFieldNumber;
#endif  // !_MSC_VER

EconAgent::EconAgent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EconAgent::InitAsDefaultInstance() {
  inventory_ = const_cast< ::proto::Inventory*>(&::proto::Inventory::default_instance());
  strategy_ = const_cast< ::proto::Strategy*>(&::proto::Strategy::default_instance());
}

EconAgent::EconAgent(const EconAgent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EconAgent::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0;
  inventory_ = NULL;
  strategy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EconAgent::~EconAgent() {
  SharedDtor();
}

void EconAgent::SharedDtor() {
  if (this != default_instance_) {
    delete inventory_;
    delete strategy_;
  }
}

void EconAgent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EconAgent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EconAgent_descriptor_;
}

const EconAgent& EconAgent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_2eproto();
  return *default_instance_;
}

EconAgent* EconAgent::default_instance_ = NULL;

EconAgent* EconAgent::New() const {
  return new EconAgent;
}

void EconAgent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    aid_ = 0;
    if (has_inventory()) {
      if (inventory_ != NULL) inventory_->::proto::Inventory::Clear();
    }
    if (has_strategy()) {
      if (strategy_ != NULL) strategy_->::proto::Strategy::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EconAgent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 aid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_inventory;
        break;
      }

      // required .proto.Inventory inventory = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inventory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inventory()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strategy;
        break;
      }

      // required .proto.Strategy strategy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strategy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strategy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EconAgent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->aid(), output);
  }

  // required .proto.Inventory inventory = 2;
  if (has_inventory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->inventory(), output);
  }

  // required .proto.Strategy strategy = 3;
  if (has_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->strategy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EconAgent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->aid(), target);
  }

  // required .proto.Inventory inventory = 2;
  if (has_inventory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->inventory(), target);
  }

  // required .proto.Strategy strategy = 3;
  if (has_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->strategy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EconAgent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aid());
    }

    // required .proto.Inventory inventory = 2;
    if (has_inventory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inventory());
    }

    // required .proto.Strategy strategy = 3;
    if (has_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strategy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EconAgent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EconAgent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EconAgent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EconAgent::MergeFrom(const EconAgent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_inventory()) {
      mutable_inventory()->::proto::Inventory::MergeFrom(from.inventory());
    }
    if (from.has_strategy()) {
      mutable_strategy()->::proto::Strategy::MergeFrom(from.strategy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EconAgent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EconAgent::CopyFrom(const EconAgent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EconAgent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_inventory()) {
    if (!this->inventory().IsInitialized()) return false;
  }
  if (has_strategy()) {
    if (!this->strategy().IsInitialized()) return false;
  }
  return true;
}

void EconAgent::Swap(EconAgent* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(inventory_, other->inventory_);
    std::swap(strategy_, other->strategy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EconAgent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EconAgent_descriptor_;
  metadata.reflection = EconAgent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ingredient::kItemIdFieldNumber;
const int Ingredient::kCountFieldNumber;
#endif  // !_MSC_VER

Ingredient::Ingredient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ingredient::InitAsDefaultInstance() {
}

Ingredient::Ingredient(const Ingredient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ingredient::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ingredient::~Ingredient() {
  SharedDtor();
}

void Ingredient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ingredient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ingredient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ingredient_descriptor_;
}

const Ingredient& Ingredient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_2eproto();
  return *default_instance_;
}

Ingredient* Ingredient::default_instance_ = NULL;

Ingredient* Ingredient::New() const {
  return new Ingredient;
}

void Ingredient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ingredient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ingredient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ingredient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ingredient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ingredient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ingredient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ingredient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ingredient::MergeFrom(const Ingredient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ingredient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ingredient::CopyFrom(const Ingredient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ingredient::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Ingredient::Swap(Ingredient* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ingredient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ingredient_descriptor_;
  metadata.reflection = Ingredient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Recipe::kIdFieldNumber;
const int Recipe::kOutputItemIdFieldNumber;
const int Recipe::kIngredientsFieldNumber;
#endif  // !_MSC_VER

Recipe::Recipe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Recipe::InitAsDefaultInstance() {
}

Recipe::Recipe(const Recipe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Recipe::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  output_item_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Recipe::~Recipe() {
  SharedDtor();
}

void Recipe::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Recipe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Recipe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Recipe_descriptor_;
}

const Recipe& Recipe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_2eproto();
  return *default_instance_;
}

Recipe* Recipe::default_instance_ = NULL;

Recipe* Recipe::New() const {
  return new Recipe;
}

void Recipe::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    output_item_id_ = 0;
  }
  ingredients_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Recipe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_output_item_id;
        break;
      }

      // required int32 output_item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_output_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_item_id_)));
          set_has_output_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ingredients;
        break;
      }

      // repeated .proto.Ingredient ingredients = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ingredients:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ingredients()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ingredients;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Recipe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 output_item_id = 2;
  if (has_output_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->output_item_id(), output);
  }

  // repeated .proto.Ingredient ingredients = 3;
  for (int i = 0; i < this->ingredients_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ingredients(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Recipe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 output_item_id = 2;
  if (has_output_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->output_item_id(), target);
  }

  // repeated .proto.Ingredient ingredients = 3;
  for (int i = 0; i < this->ingredients_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ingredients(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Recipe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 output_item_id = 2;
    if (has_output_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->output_item_id());
    }

  }
  // repeated .proto.Ingredient ingredients = 3;
  total_size += 1 * this->ingredients_size();
  for (int i = 0; i < this->ingredients_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ingredients(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Recipe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Recipe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Recipe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Recipe::MergeFrom(const Recipe& from) {
  GOOGLE_CHECK_NE(&from, this);
  ingredients_.MergeFrom(from.ingredients_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_output_item_id()) {
      set_output_item_id(from.output_item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Recipe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Recipe::CopyFrom(const Recipe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Recipe::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < ingredients_size(); i++) {
    if (!this->ingredients(i).IsInitialized()) return false;
  }
  return true;
}

void Recipe::Swap(Recipe* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(output_item_id_, other->output_item_id_);
    ingredients_.Swap(&other->ingredients_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Recipe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Recipe_descriptor_;
  metadata.reflection = Recipe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World::kArmorsFieldNumber;
const int World::kCraftingMaterialsFieldNumber;
const int World::kRecipesFieldNumber;
#endif  // !_MSC_VER

World::World()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World::InitAsDefaultInstance() {
}

World::World(const World& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World::~World() {
  SharedDtor();
}

void World::SharedDtor() {
  if (this != default_instance_) {
  }
}

void World::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_descriptor_;
}

const World& World::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_2eproto();
  return *default_instance_;
}

World* World::default_instance_ = NULL;

World* World::New() const {
  return new World;
}

void World::Clear() {
  armors_.Clear();
  crafting_materials_.Clear();
  recipes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.Item armors = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_armors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_armors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_armors;
        if (input->ExpectTag(18)) goto parse_crafting_materials;
        break;
      }

      // repeated .proto.Item crafting_materials = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_crafting_materials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_crafting_materials()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_crafting_materials;
        if (input->ExpectTag(26)) goto parse_recipes;
        break;
      }

      // repeated .proto.Recipe recipes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recipes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recipes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_recipes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.Item armors = 1;
  for (int i = 0; i < this->armors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->armors(i), output);
  }

  // repeated .proto.Item crafting_materials = 2;
  for (int i = 0; i < this->crafting_materials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->crafting_materials(i), output);
  }

  // repeated .proto.Recipe recipes = 3;
  for (int i = 0; i < this->recipes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->recipes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.Item armors = 1;
  for (int i = 0; i < this->armors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->armors(i), target);
  }

  // repeated .proto.Item crafting_materials = 2;
  for (int i = 0; i < this->crafting_materials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->crafting_materials(i), target);
  }

  // repeated .proto.Recipe recipes = 3;
  for (int i = 0; i < this->recipes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->recipes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World::ByteSize() const {
  int total_size = 0;

  // repeated .proto.Item armors = 1;
  total_size += 1 * this->armors_size();
  for (int i = 0; i < this->armors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->armors(i));
  }

  // repeated .proto.Item crafting_materials = 2;
  total_size += 1 * this->crafting_materials_size();
  for (int i = 0; i < this->crafting_materials_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->crafting_materials(i));
  }

  // repeated .proto.Recipe recipes = 3;
  total_size += 1 * this->recipes_size();
  for (int i = 0; i < this->recipes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recipes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World::MergeFrom(const World& from) {
  GOOGLE_CHECK_NE(&from, this);
  armors_.MergeFrom(from.armors_);
  crafting_materials_.MergeFrom(from.crafting_materials_);
  recipes_.MergeFrom(from.recipes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World::CopyFrom(const World& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World::IsInitialized() const {

  for (int i = 0; i < armors_size(); i++) {
    if (!this->armors(i).IsInitialized()) return false;
  }
  for (int i = 0; i < crafting_materials_size(); i++) {
    if (!this->crafting_materials(i).IsInitialized()) return false;
  }
  for (int i = 0; i < recipes_size(); i++) {
    if (!this->recipes(i).IsInitialized()) return false;
  }
  return true;
}

void World::Swap(World* other) {
  if (other != this) {
    armors_.Swap(&other->armors_);
    crafting_materials_.Swap(&other->crafting_materials_);
    recipes_.Swap(&other->recipes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_descriptor_;
  metadata.reflection = World_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
