// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cpfa.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cpfa.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* Cpfa_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cpfa_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cpfa_2eproto() {
  protobuf_AddDesc_cpfa_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cpfa.proto");
  GOOGLE_CHECK(file != NULL);
  Cpfa_descriptor_ = file->message_type(0);
  static const int Cpfa_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cpfa, probabilityofswitchingtosearching_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cpfa, probabilityofreturningtonest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cpfa, uninformedsearchvariation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cpfa, rateofinformedsearchdecay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cpfa, rateofsitefidelity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cpfa, rateoflayingpheromone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cpfa, rateofpheromonedecay_),
  };
  Cpfa_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cpfa_descriptor_,
      Cpfa::default_instance_,
      Cpfa_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cpfa, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cpfa, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cpfa));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cpfa_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cpfa_descriptor_, &Cpfa::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cpfa_2eproto() {
  delete Cpfa::default_instance_;
  delete Cpfa_reflection_;
}

void protobuf_AddDesc_cpfa_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ncpfa.proto\022\005proto\"\366\001\n\004Cpfa\022)\n!probabil"
    "ityOfSwitchingToSearching\030\001 \002(\001\022$\n\034proba"
    "bilityOfReturningToNest\030\002 \002(\001\022!\n\031uninfor"
    "medSearchVariation\030\003 \002(\001\022!\n\031rateOfInform"
    "edSearchDecay\030\004 \002(\001\022\032\n\022rateOfSiteFidelit"
    "y\030\005 \002(\001\022\035\n\025rateOfLayingPheromone\030\006 \002(\001\022\034"
    "\n\024rateOfPheromoneDecay\030\007 \002(\001", 268);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cpfa.proto", &protobuf_RegisterTypes);
  Cpfa::default_instance_ = new Cpfa();
  Cpfa::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cpfa_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cpfa_2eproto {
  StaticDescriptorInitializer_cpfa_2eproto() {
    protobuf_AddDesc_cpfa_2eproto();
  }
} static_descriptor_initializer_cpfa_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Cpfa::kProbabilityOfSwitchingToSearchingFieldNumber;
const int Cpfa::kProbabilityOfReturningToNestFieldNumber;
const int Cpfa::kUninformedSearchVariationFieldNumber;
const int Cpfa::kRateOfInformedSearchDecayFieldNumber;
const int Cpfa::kRateOfSiteFidelityFieldNumber;
const int Cpfa::kRateOfLayingPheromoneFieldNumber;
const int Cpfa::kRateOfPheromoneDecayFieldNumber;
#endif  // !_MSC_VER

Cpfa::Cpfa()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Cpfa)
}

void Cpfa::InitAsDefaultInstance() {
}

Cpfa::Cpfa(const Cpfa& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.Cpfa)
}

void Cpfa::SharedCtor() {
  _cached_size_ = 0;
  probabilityofswitchingtosearching_ = 0;
  probabilityofreturningtonest_ = 0;
  uninformedsearchvariation_ = 0;
  rateofinformedsearchdecay_ = 0;
  rateofsitefidelity_ = 0;
  rateoflayingpheromone_ = 0;
  rateofpheromonedecay_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cpfa::~Cpfa() {
  // @@protoc_insertion_point(destructor:proto.Cpfa)
  SharedDtor();
}

void Cpfa::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cpfa::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cpfa::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cpfa_descriptor_;
}

const Cpfa& Cpfa::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cpfa_2eproto();
  return *default_instance_;
}

Cpfa* Cpfa::default_instance_ = NULL;

Cpfa* Cpfa::New() const {
  return new Cpfa;
}

void Cpfa::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Cpfa*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(probabilityofswitchingtosearching_, rateofpheromonedecay_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cpfa::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Cpfa)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double probabilityOfSwitchingToSearching = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probabilityofswitchingtosearching_)));
          set_has_probabilityofswitchingtosearching();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_probabilityOfReturningToNest;
        break;
      }

      // required double probabilityOfReturningToNest = 2;
      case 2: {
        if (tag == 17) {
         parse_probabilityOfReturningToNest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probabilityofreturningtonest_)));
          set_has_probabilityofreturningtonest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_uninformedSearchVariation;
        break;
      }

      // required double uninformedSearchVariation = 3;
      case 3: {
        if (tag == 25) {
         parse_uninformedSearchVariation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &uninformedsearchvariation_)));
          set_has_uninformedsearchvariation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_rateOfInformedSearchDecay;
        break;
      }

      // required double rateOfInformedSearchDecay = 4;
      case 4: {
        if (tag == 33) {
         parse_rateOfInformedSearchDecay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rateofinformedsearchdecay_)));
          set_has_rateofinformedsearchdecay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_rateOfSiteFidelity;
        break;
      }

      // required double rateOfSiteFidelity = 5;
      case 5: {
        if (tag == 41) {
         parse_rateOfSiteFidelity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rateofsitefidelity_)));
          set_has_rateofsitefidelity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_rateOfLayingPheromone;
        break;
      }

      // required double rateOfLayingPheromone = 6;
      case 6: {
        if (tag == 49) {
         parse_rateOfLayingPheromone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rateoflayingpheromone_)));
          set_has_rateoflayingpheromone();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_rateOfPheromoneDecay;
        break;
      }

      // required double rateOfPheromoneDecay = 7;
      case 7: {
        if (tag == 57) {
         parse_rateOfPheromoneDecay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rateofpheromonedecay_)));
          set_has_rateofpheromonedecay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Cpfa)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Cpfa)
  return false;
#undef DO_
}

void Cpfa::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Cpfa)
  // required double probabilityOfSwitchingToSearching = 1;
  if (has_probabilityofswitchingtosearching()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->probabilityofswitchingtosearching(), output);
  }

  // required double probabilityOfReturningToNest = 2;
  if (has_probabilityofreturningtonest()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->probabilityofreturningtonest(), output);
  }

  // required double uninformedSearchVariation = 3;
  if (has_uninformedsearchvariation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->uninformedsearchvariation(), output);
  }

  // required double rateOfInformedSearchDecay = 4;
  if (has_rateofinformedsearchdecay()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rateofinformedsearchdecay(), output);
  }

  // required double rateOfSiteFidelity = 5;
  if (has_rateofsitefidelity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->rateofsitefidelity(), output);
  }

  // required double rateOfLayingPheromone = 6;
  if (has_rateoflayingpheromone()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->rateoflayingpheromone(), output);
  }

  // required double rateOfPheromoneDecay = 7;
  if (has_rateofpheromonedecay()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->rateofpheromonedecay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.Cpfa)
}

::google::protobuf::uint8* Cpfa::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Cpfa)
  // required double probabilityOfSwitchingToSearching = 1;
  if (has_probabilityofswitchingtosearching()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->probabilityofswitchingtosearching(), target);
  }

  // required double probabilityOfReturningToNest = 2;
  if (has_probabilityofreturningtonest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->probabilityofreturningtonest(), target);
  }

  // required double uninformedSearchVariation = 3;
  if (has_uninformedsearchvariation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->uninformedsearchvariation(), target);
  }

  // required double rateOfInformedSearchDecay = 4;
  if (has_rateofinformedsearchdecay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rateofinformedsearchdecay(), target);
  }

  // required double rateOfSiteFidelity = 5;
  if (has_rateofsitefidelity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->rateofsitefidelity(), target);
  }

  // required double rateOfLayingPheromone = 6;
  if (has_rateoflayingpheromone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->rateoflayingpheromone(), target);
  }

  // required double rateOfPheromoneDecay = 7;
  if (has_rateofpheromonedecay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->rateofpheromonedecay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Cpfa)
  return target;
}

int Cpfa::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double probabilityOfSwitchingToSearching = 1;
    if (has_probabilityofswitchingtosearching()) {
      total_size += 1 + 8;
    }

    // required double probabilityOfReturningToNest = 2;
    if (has_probabilityofreturningtonest()) {
      total_size += 1 + 8;
    }

    // required double uninformedSearchVariation = 3;
    if (has_uninformedsearchvariation()) {
      total_size += 1 + 8;
    }

    // required double rateOfInformedSearchDecay = 4;
    if (has_rateofinformedsearchdecay()) {
      total_size += 1 + 8;
    }

    // required double rateOfSiteFidelity = 5;
    if (has_rateofsitefidelity()) {
      total_size += 1 + 8;
    }

    // required double rateOfLayingPheromone = 6;
    if (has_rateoflayingpheromone()) {
      total_size += 1 + 8;
    }

    // required double rateOfPheromoneDecay = 7;
    if (has_rateofpheromonedecay()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cpfa::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cpfa* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cpfa*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cpfa::MergeFrom(const Cpfa& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_probabilityofswitchingtosearching()) {
      set_probabilityofswitchingtosearching(from.probabilityofswitchingtosearching());
    }
    if (from.has_probabilityofreturningtonest()) {
      set_probabilityofreturningtonest(from.probabilityofreturningtonest());
    }
    if (from.has_uninformedsearchvariation()) {
      set_uninformedsearchvariation(from.uninformedsearchvariation());
    }
    if (from.has_rateofinformedsearchdecay()) {
      set_rateofinformedsearchdecay(from.rateofinformedsearchdecay());
    }
    if (from.has_rateofsitefidelity()) {
      set_rateofsitefidelity(from.rateofsitefidelity());
    }
    if (from.has_rateoflayingpheromone()) {
      set_rateoflayingpheromone(from.rateoflayingpheromone());
    }
    if (from.has_rateofpheromonedecay()) {
      set_rateofpheromonedecay(from.rateofpheromonedecay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cpfa::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cpfa::CopyFrom(const Cpfa& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cpfa::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void Cpfa::Swap(Cpfa* other) {
  if (other != this) {
    std::swap(probabilityofswitchingtosearching_, other->probabilityofswitchingtosearching_);
    std::swap(probabilityofreturningtonest_, other->probabilityofreturningtonest_);
    std::swap(uninformedsearchvariation_, other->uninformedsearchvariation_);
    std::swap(rateofinformedsearchdecay_, other->rateofinformedsearchdecay_);
    std::swap(rateofsitefidelity_, other->rateofsitefidelity_);
    std::swap(rateoflayingpheromone_, other->rateoflayingpheromone_);
    std::swap(rateofpheromonedecay_, other->rateofpheromonedecay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cpfa::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cpfa_descriptor_;
  metadata.reflection = Cpfa_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
